{"name": "test_api[\\u670d\\u52a1\\u76d1\\u63a7-\\u67e5\\u8be2\\u65e5\\u7ea7\\u6570\\u636e]", "status": "failed", "statusDetails": {"message": "AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code", "trace": "case = {'Headers': {'Content-Type': 'application/json', 'authorization': 'SecSSO AT-13740-SfhcoV6pGadZWf1w28s9Ehef3W7GMmuC'},...on': 'DAY', 'endTime': 1739318399, 'packageID': 1, 'projectID': 1, ...}}, 'Method': 'POST', 'Name': '服务监控-查询日级数据', ...}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        test_data,\n        ids=lambda case: case[\"Name\"].encode('utf-8').decode('utf-8')\n    )\n    @allure.story(\"接口测试用例\")\n    def test_api(case):\n        response = request_handler.send_request(\n            method=case[\"Method\"],\n            url=case[\"URL\"],\n            headers=case.get(\"Headers\"),\n            json=case.get(\"JSON\")\n    \n        )\n    \n        with allure.step(\"断言 HTTP 状态码\"):\n>           assert response.status_code == case[\"Status\"], f\"预期 {case['Status']}，实际 {response.status_code}\"\nE           AssertionError: 预期 200，实际 401\nE           assert 401 == 200\nE            +  where 401 = <Response [401]>.status_code\n\ntestcases\\test_api.py:34: AssertionError"}, "steps": [{"name": "断言 HTTP 状态码", "status": "failed", "statusDetails": {"message": "AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code\n", "trace": "  File \"D:\\KW\\testcases\\test_api.py\", line 34, in test_api\n    assert response.status_code == case[\"Status\"], f\"预期 {case['Status']}，实际 {response.status_code}\"\n"}, "start": 1740120145102, "stop": 1740120145102}], "parameters": [{"name": "case", "value": "{'Name': '服务监控-查询日级数据', 'Method': 'POST', 'URL': 'https://kw-be.tsd.xindong.com/api/v2/graphql', 'Headers': {'Content-Type': 'application/json', 'authorization': 'SecSSO AT-13740-SfhcoV6pGadZWf1w28s9Ehef3W7GMmuC'}, 'Params': None, 'JSON': {'operationName': 'queryServiceMonitoring', 'variables': {'dataDimension': 'DAY', 'startTime': 1736726400, 'endTime': 1739318399, 'packageID': 1, 'projectID': 1}, 'query': 'query queryServiceMonitoring($packageID: Int!, $projectID: Int!, $startTime: Int!, $endTime: Int!, $dataDimension: DataDimension!) {\\n  metric(\\n    packageID: $packageID\\n    projectID: $projectID\\n    startTime: $startTime\\n    endTime: $endTime\\n    dataDimension: $dataDimension\\n  ) {\\n    list {\\n      uploadCount\\n      kafkaCount\\n      chCount\\n      spendTimeCount\\n      daily\\n      hour\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n'}, 'Status': 200, 'Response': {'data': {'metric': {'list': [{'uploadCount': 3, 'kafkaCount': 3, 'chCount': 3, 'spendTimeCount': 82, 'daily': '2025/01/17', 'hour': '', '__typename': 'MetricDailyCount'}], '__typename': 'MetricResponse'}}}}"}], "start": 1740120144806, "stop": 1740120145130, "uuid": "83ef73ec-f4f9-41fb-89a8-6b10d1dfdbb2", "historyId": "db00f58450c1410bf6e564b89906c9b6", "testCaseId": "af5b7c21877370d8ca89a0be2bcb5cd8", "fullName": "testcases.test_api#test_api", "labels": [{"name": "story", "value": "接口测试用例"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "DESKTOP-4AJP2OA"}, {"name": "thread", "value": "16592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_api"}]}