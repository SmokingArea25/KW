{"uid":"dfbe040f691675f3","name":"test_api[服务监控-查询日级数据]","fullName":"testcases.test_api#test_api","historyId":"db00f58450c1410bf6e564b89906c9b6","time":{"start":1740121009896,"stop":1740121010186,"duration":290},"status":"failed","statusMessage":"AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code","statusTrace":"case = {'Headers': {'Content-Type': 'application/json', 'authorization': 'SecSSO AT-13740-SfhcoV6pGadZWf1w28s9Ehef3W7GMmuC'},...on': 'DAY', 'endTime': 1739318399, 'packageID': 1, 'projectID': 1, ...}}, 'Method': 'POST', 'Name': '服务监控-查询日级数据', ...}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        test_data,\n        ids=lambda case: case[\"Name\"].encode('utf-8').decode('utf-8')\n    )\n    @allure.story(\"接口测试用例\")\n    def test_api(case):\n        response = request_handler.send_request(\n            method=case[\"Method\"],\n            url=case[\"URL\"],\n            headers=case.get(\"Headers\"),\n            json=case.get(\"JSON\")\n    \n        )\n    \n        with allure.step(\"断言 HTTP 状态码\"):\n>           assert response.status_code == case[\"Status\"], f\"预期 {case['Status']}，实际 {response.status_code}\"\nE           AssertionError: 预期 200，实际 401\nE           assert 401 == 200\nE            +  where 401 = <Response [401]>.status_code\n\ntestcases\\test_api.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":true,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code","statusTrace":"case = {'Headers': {'Content-Type': 'application/json', 'authorization': 'SecSSO AT-13740-SfhcoV6pGadZWf1w28s9Ehef3W7GMmuC'},...on': 'DAY', 'endTime': 1739318399, 'packageID': 1, 'projectID': 1, ...}}, 'Method': 'POST', 'Name': '服务监控-查询日级数据', ...}\n\n    @pytest.mark.parametrize(\n        \"case\",\n        test_data,\n        ids=lambda case: case[\"Name\"].encode('utf-8').decode('utf-8')\n    )\n    @allure.story(\"接口测试用例\")\n    def test_api(case):\n        response = request_handler.send_request(\n            method=case[\"Method\"],\n            url=case[\"URL\"],\n            headers=case.get(\"Headers\"),\n            json=case.get(\"JSON\")\n    \n        )\n    \n        with allure.step(\"断言 HTTP 状态码\"):\n>           assert response.status_code == case[\"Status\"], f\"预期 {case['Status']}，实际 {response.status_code}\"\nE           AssertionError: 预期 200，实际 401\nE           assert 401 == 200\nE            +  where 401 = <Response [401]>.status_code\n\ntestcases\\test_api.py:34: AssertionError","steps":[{"name":"断言 HTTP 状态码","time":{"start":1740121010186,"stop":1740121010186,"duration":0},"status":"failed","statusMessage":"AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code\n","statusTrace":"  File \"D:\\KW\\testcases\\test_api.py\", line 34, in test_api\n    assert response.status_code == case[\"Status\"], f\"预期 {case['Status']}，实际 {response.status_code}\"\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0},"afterStages":[],"labels":[{"name":"story","value":"接口测试用例"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_api"},{"name":"host","value":"DESKTOP-4AJP2OA"},{"name":"thread","value":"24404-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"case","value":"{'Name': '服务监控-查询日级数据', 'Method': 'POST', 'URL': 'https://kw-be.tsd.xindong.com/api/v2/graphql', 'Headers': {'Content-Type': 'application/json', 'authorization': 'SecSSO AT-13740-SfhcoV6pGadZWf1w28s9Ehef3W7GMmuC'}, 'Params': None, 'JSON': {'operationName': 'queryServiceMonitoring', 'variables': {'dataDimension': 'DAY', 'startTime': 1736726400, 'endTime': 1739318399, 'packageID': 1, 'projectID': 1}, 'query': 'query queryServiceMonitoring($packageID: Int!, $projectID: Int!, $startTime: Int!, $endTime: Int!, $dataDimension: DataDimension!) {\\n  metric(\\n    packageID: $packageID\\n    projectID: $projectID\\n    startTime: $startTime\\n    endTime: $endTime\\n    dataDimension: $dataDimension\\n  ) {\\n    list {\\n      uploadCount\\n      kafkaCount\\n      chCount\\n      spendTimeCount\\n      daily\\n      hour\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n'}, 'Status': 200, 'Response': {'data': {'metric': {'list': [{'uploadCount': 3, 'kafkaCount': 3, 'chCount': 3, 'spendTimeCount': 82, 'daily': '2025/01/17', 'hour': '', '__typename': 'MetricDailyCount'}], '__typename': 'MetricResponse'}}}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"23ca0056fea1df5","status":"failed","statusDetails":"AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code","time":{"start":1740120529216,"stop":1740120529506,"duration":290}},{"uid":"f59c24925fa6c8f","status":"failed","statusDetails":"AssertionError: 预期 200，实际 401\nassert 401 == 200\n +  where 401 = <Response [401]>.status_code","time":{"start":1740120144806,"stop":1740120145130,"duration":324}},{"uid":"dca0bcac9737be7a","status":"passed","time":{"start":1739263382806,"stop":1739263383084,"duration":278}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"dfbe040f691675f3.json","parameterValues":["{'Name': '服务监控-查询日级数据', 'Method': 'POST', 'URL': 'https://kw-be.tsd.xindong.com/api/v2/graphql', 'Headers': {'Content-Type': 'application/json', 'authorization': 'SecSSO AT-13740-SfhcoV6pGadZWf1w28s9Ehef3W7GMmuC'}, 'Params': None, 'JSON': {'operationName': 'queryServiceMonitoring', 'variables': {'dataDimension': 'DAY', 'startTime': 1736726400, 'endTime': 1739318399, 'packageID': 1, 'projectID': 1}, 'query': 'query queryServiceMonitoring($packageID: Int!, $projectID: Int!, $startTime: Int!, $endTime: Int!, $dataDimension: DataDimension!) {\\n  metric(\\n    packageID: $packageID\\n    projectID: $projectID\\n    startTime: $startTime\\n    endTime: $endTime\\n    dataDimension: $dataDimension\\n  ) {\\n    list {\\n      uploadCount\\n      kafkaCount\\n      chCount\\n      spendTimeCount\\n      daily\\n      hour\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n'}, 'Status': 200, 'Response': {'data': {'metric': {'list': [{'uploadCount': 3, 'kafkaCount': 3, 'chCount': 3, 'spendTimeCount': 82, 'daily': '2025/01/17', 'hour': '', '__typename': 'MetricDailyCount'}], '__typename': 'MetricResponse'}}}}"]}